"use client"

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  BarChart3, 
  PieChart, 
  LineChart, 
  TrendingUp, 
  TrendingDown,
  Upload,
  Download,
  Copy,
  Settings,
  Palette,
  Maximize,
  Save,
  RefreshCw,
  Sparkles,
  Database,
  FileText
} from 'lucide-react'
import { motion } from 'framer-motion'

interface ChartData {
  labels: string[]
  datasets: Array<{
    label: string
    data: number[]
    backgroundColor?: string[]
    borderColor?: string
    borderWidth?: number
  }>
}

interface ChartConfig {
  type: 'bar' | 'line' | 'pie' | 'doughnut' | 'area' | 'scatter'
  title: string
  xAxis: string
  yAxis: string
  colors: string[]
  showLegend: boolean
  showGrid: boolean
}

const chartTypes = [
  { value: 'bar', label: 'Bar Chart', icon: BarChart3 },
  { value: 'line', label: 'Line Chart', icon: LineChart },
  { value: 'pie', label: 'Pie Chart', icon: PieChart },
  { value: 'doughnut', label: 'Doughnut Chart', icon: PieChart },
  { value: 'area', label: 'Area Chart', icon: LineChart },
  { value: 'scatter', label: 'Scatter Plot', icon: BarChart3 },
]

const colorSchemes = [
  { name: 'Default', colors: ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6'] },
  { name: 'Ocean', colors: ['#0891B2', '#06B6D4', '#22D3EE', '#67E8F9', '#BAE6FD'] },
  { name: 'Sunset', colors: ['#DC2626', '#EA580C', '#F59E0B', '#EAB308', '#84CC16'] },
  { name: 'Forest', colors: ['#166534', '#16A34A', '#22C55E', '#4ADE80', '#86EFAC'] },
  { name: 'Purple', colors: ['#7C3AED', '#8B5CF6', '#A78BFA', '#C4B5FD', '#DDD6FE'] },
]

const sampleData = `Month,Sales,Expenses,Profit
January,45000,32000,13000
February,52000,35000,17000
March,48000,33000,15000
April,55000,38000,17000
May,62000,42000,20000
June,58000,40000,18000
July,65000,45000,20000
August,70000,48000,22000
September,68000,46000,22000
October,72000,50000,22000
November,75000,52000,23000
December,80000,55000,25000`

export default function DataVisualizationTool() {
  const [chartType, setChartType] = useState('bar')
  const [chartTitle, setChartTitle] = useState('Monthly Sales Report')
  const [dataInput, setDataInput] = useState(sampleData)
  const [chartConfig, setChartConfig] = useState<ChartConfig>({
    type: 'bar',
    title: 'Monthly Sales Report',
    xAxis: 'Month',
    yAxis: 'Sales',
    colors: colorSchemes[0].colors,
    showLegend: true,
    showGrid: true
  })
  const [chartData, setChartData] = useState<ChartData | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [copied, setCopied] = useState(false)

  const parseCSVData = (csvText: string): ChartData => {
    const lines = csvText.trim().split('\n')
    const headers = lines[0].split(',').map(h => h.trim())
    const dataLines = lines.slice(1).map(line => line.split(',').map(cell => cell.trim()))
    
    const labels = dataLines.map(line => line[0])
    const datasets = headers.slice(1).map((header, index) => ({
      label: header,
      data: dataLines.map(line => parseFloat(line[index + 1]) || 0),
      backgroundColor: chartConfig.colors,
      borderColor: chartConfig.colors[index % chartConfig.colors.length],
      borderWidth: 2
    }))

    return { labels, datasets }
  }

  const generateChart = async () => {
    if (!dataInput.trim()) return

    setIsProcessing(true)
    
    // Simulate data processing
    await new Promise(resolve => setTimeout(resolve, 1500))

    try {
      const parsedData = parseCSVData(dataInput)
      setChartData(parsedData)
      setChartConfig(prev => ({ ...prev, type: chartType as any }))
    } catch (error) {
      console.error('Error parsing data:', error)
    } finally {
      setIsProcessing(false)
    }
  }

  const copyChartCode = async () => {
    if (!chartData) return
    
    const code = `Chart Configuration:
Type: ${chartConfig.type}
Title: ${chartConfig.title}
X-Axis: ${chartConfig.xAxis}
Y-Axis: ${chartConfig.yAxis}

Data:
${chartData.labels.map((label, i) => 
  `${label}: ${chartData.datasets.map(ds => ds.data[i]).join(', ')}`
).join('\n')}

Generated by Data Visualization Tool`
    
    await navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const loadSampleData = () => {
    setDataInput(sampleData)
  }

  const renderChartPreview = () => {
    if (!chartData) {
      return (
        <div className="flex items-center justify-center h-64 bg-muted/30 rounded-lg">
          <div className="text-center">
            <BarChart3 className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
            <p className="text-muted-foreground">Enter data and generate a chart</p>
          </div>
        </div>
      )
    }

    // Simple chart representation using CSS and HTML
    const maxValue = Math.max(...chartData.datasets.flatMap(ds => ds.data))
    
    return (
      <div className="w-full h-64 bg-white rounded-lg border p-4">
        <div className="h-full flex items-end justify-around">
          {chartData.labels.map((label, index) => (
            <div key={index} className="flex flex-col items-center flex-1">
              <div className="flex items-end justify-center h-full w-full gap-1">
                {chartData.datasets.map((dataset, datasetIndex) => (
                  <div
                    key={datasetIndex}
                    className="flex-1 bg-blue-500 rounded-t transition-all duration-500"
                    style={{
                      height: `${(dataset.data[index] / maxValue) * 80}%`,
                      backgroundColor: chartConfig.colors[datasetIndex % chartConfig.colors.length]
                    }}
                  />
                ))}
              </div>
              <div className="text-xs mt-2 text-center">{label}</div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <Badge variant="secondary" className="text-sm px-4 py-2 mb-4">
            <BarChart3 className="w-4 h-4 mr-2" />
            Data Visualization
          </Badge>
          <h1 className="text-4xl font-bold mb-4">Data Visualization Tool</h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Transform your data into beautiful, interactive charts and graphs. 
            Create professional visualizations from CSV data with just a few clicks.
          </p>
        </div>

        {/* Input Section */}
        <div className="grid lg:grid-cols-2 gap-8 mb-8">
          {/* Data Input */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Database className="w-5 h-5" />
                Data Input
              </CardTitle>
              <CardDescription>
                Enter your data in CSV format or use sample data
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">Chart Title</label>
                <Input
                  value={chartTitle}
                  onChange={(e) => setChartTitle(e.target.value)}
                  placeholder="Enter chart title"
                />
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Chart Type</label>
                <Select value={chartType} onValueChange={setChartType}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {chartTypes.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Data (CSV Format)</label>
                <Textarea
                  value={dataInput}
                  onChange={(e) => setDataInput(e.target.value)}
                  placeholder="Month,Sales,Expenses&#10;January,45000,32000&#10;February,52000,35000"
                  className="min-h-[200px] font-mono text-sm"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  First row should be headers, subsequent rows should contain data
                </p>
              </div>
              
              <div className="flex gap-2">
                <Button 
                  onClick={generateChart} 
                  disabled={!dataInput.trim() || isProcessing}
                  className="flex-1"
                >
                  {isProcessing ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-4 h-4 mr-2" />
                      Generate Chart
                    </>
                  )}
                </Button>
                <Button 
                  variant="outline" 
                  onClick={loadSampleData}
                  className="flex-1"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  Load Sample
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Chart Configuration */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5" />
                Chart Configuration
              </CardTitle>
              <CardDescription>
                Customize your chart appearance and settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">Color Scheme</label>
                <Select 
                  value="default" 
                  onValueChange={(value) => {
                    const scheme = colorSchemes.find(s => s.name.toLowerCase() === value)
                    if (scheme) {
                      setChartConfig(prev => ({ ...prev, colors: scheme.colors }))
                    }
                  }}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {colorSchemes.map((scheme) => (
                      <SelectItem key={scheme.name} value={scheme.name.toLowerCase()}>
                        {scheme.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">X-Axis Label</label>
                <Input
                  value={chartConfig.xAxis}
                  onChange={(e) => setChartConfig(prev => ({ ...prev, xAxis: e.target.value }))}
                  placeholder="X-axis label"
                />
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Y-Axis Label</label>
                <Input
                  value={chartConfig.yAxis}
                  onChange={(e) => setChartConfig(prev => ({ ...prev, yAxis: e.target.value }))}
                  placeholder="Y-axis label"
                />
              </div>
              
              <div className="space-y-3">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={chartConfig.showLegend}
                    onChange={(e) => setChartConfig(prev => ({ ...prev, showLegend: e.target.checked }))}
                    className="rounded"
                  />
                  <span className="text-sm">Show Legend</span>
                </label>
                
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={chartConfig.showGrid}
                    onChange={(e) => setChartConfig(prev => ({ ...prev, showGrid: e.target.checked }))}
                    className="rounded"
                  />
                  <span className="text-sm">Show Grid</span>
                </label>
              </div>
              
              <div className="flex gap-2">
                <Button variant="outline" className="flex-1">
                  <Palette className="w-4 h-4 mr-2" />
                  Customize Colors
                </Button>
                <Button variant="outline" className="flex-1">
                  <Maximize className="w-4 h-4 mr-2" />
                  Full Screen
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Chart Preview */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Chart Preview</CardTitle>
            <CardDescription>
              Your visualization will appear here
            </CardDescription>
          </CardHeader>
          <CardContent>
            {renderChartPreview()}
          </CardContent>
        </Card>

        {/* Results Section */}
        {chartData && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Tabs defaultValue="data" className="space-y-4">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="data">Data ({chartData.datasets.length} datasets)</TabsTrigger>
                <TabsTrigger value="export">Export</TabsTrigger>
                <TabsTrigger value="insights">Insights</TabsTrigger>
              </TabsList>

              <TabsContent value="data">
                <Card>
                  <CardHeader>
                    <CardTitle>Chart Data</CardTitle>
                    <CardDescription>
                      Raw data used to generate the visualization
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="overflow-x-auto">
                      <table className="w-full text-sm">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left py-2">{chartConfig.xAxis}</th>
                            {chartData.datasets.map((dataset, index) => (
                              <th key={index} className="text-left py-2">{dataset.label}</th>
                            ))}
                          </tr>
                        </thead>
                        <tbody>
                          {chartData.labels.map((label, rowIndex) => (
                            <tr key={rowIndex} className="border-b">
                              <td className="py-2 font-medium">{label}</td>
                              {chartData.datasets.map((dataset, datasetIndex) => (
                                <td key={datasetIndex} className="py-2">
                                  {dataset.data[rowIndex].toLocaleString()}
                                </td>
                              ))}
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="export">
                <Card>
                  <CardHeader>
                    <CardTitle>Export Chart</CardTitle>
                    <CardDescription>
                      Export your chart in various formats
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <Button 
                        onClick={copyChartCode}
                        variant="outline"
                        className="h-auto p-4"
                      >
                        <div className="text-center">
                          <Copy className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">Copy Configuration</div>
                          <div className="text-xs text-muted-foreground">
                            Copy chart data and settings
                          </div>
                        </div>
                      </Button>
                      
                      <Button 
                        variant="outline"
                        className="h-auto p-4"
                        disabled
                      >
                        <div className="text-center">
                          <Download className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">Download PNG</div>
                          <div className="text-xs text-muted-foreground">
                            Save as image
                          </div>
                        </div>
                      </Button>
                      
                      <Button 
                        variant="outline"
                        className="h-auto p-4"
                        disabled
                      >
                        <div className="text-center">
                          <Download className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">Save Project</div>
                          <div className="text-xs text-muted-foreground">
                            Export as JSON
                          </div>
                        </div>
                      </Button>
                    </div>
                    
                    {copied && (
                      <div className="text-center text-sm text-green-600">
                        ✓ Chart configuration copied to clipboard!
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="insights">
                <Card>
                  <CardHeader>
                    <CardTitle>Data Insights</CardTitle>
                    <CardDescription>
                      AI-powered analysis of your data
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <h3 className="font-semibold">Trends Analysis</h3>
                        <div className="space-y-3">
                          <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                            <div className="flex items-center gap-2">
                              <TrendingUp className="w-5 h-5 text-green-600" />
                              <span className="text-sm">Positive Trend</span>
                            </div>
                            <Badge className="bg-green-100 text-green-800">+15.2%</Badge>
                          </div>
                          <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                            <div className="flex items-center gap-2">
                              <BarChart3 className="w-5 h-5 text-blue-600" />
                              <span className="text-sm">Seasonal Pattern</span>
                            </div>
                            <Badge className="bg-blue-100 text-blue-800">Identified</Badge>
                          </div>
                        </div>
                      </div>
                      
                      <div className="space-y-4">
                        <h3 className="font-semibold">Key Metrics</h3>
                        <div className="space-y-3">
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Average Value</span>
                            <span className="font-semibold">
                              {Math.round(chartData.datasets[0].data.reduce((a, b) => a + b, 0) / chartData.datasets[0].data.length).toLocaleString()}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Maximum Value</span>
                            <span className="font-semibold">
                              {Math.max(...chartData.datasets[0].data).toLocaleString()}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Minimum Value</span>
                            <span className="font-semibold">
                              {Math.min(...chartData.datasets[0].data).toLocaleString()}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </motion.div>
        )}

        {/* Features Section */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>Why Use Data Visualization Tool?</CardTitle>
            <CardDescription>
              Powerful features to create stunning data visualizations
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <BarChart3 className="w-6 h-6 text-primary" />
                </div>
                <h3 className="font-semibold">Multiple Chart Types</h3>
                <p className="text-sm text-muted-foreground">
                  Bar, line, pie, doughnut, area, and scatter plots
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Upload className="w-6 h-6 text-primary" />
                </div>
                <h3 className="font-semibold">Easy Data Import</h3>
                <p className="text-sm text-muted-foreground">
                  CSV data import with automatic parsing and validation
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Palette className="w-6 h-6 text-primary" />
                </div>
                <h3 className="font-semibold">Customizable Design</h3>
                <p className="text-sm text-muted-foreground">
                  Multiple color schemes and styling options
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Download className="w-6 h-6 text-primary" />
                </div>
                <h3 className="font-semibold">Export Options</h3>
                <p className="text-sm text-muted-foreground">
                  Export as images, data, or save projects
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}