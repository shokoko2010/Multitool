"use client"

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Code, 
  Brain, 
  CheckCircle, 
  AlertCircle, 
  AlertTriangle, 
  Lightbulb, 
  Copy, 
  Download,
  RefreshCw,
  Sparkles,
  Shield,
  Zap
} from 'lucide-react'
import { motion } from 'framer-motion'

interface CodeIssue {
  type: 'error' | 'warning' | 'suggestion'
  line: number
  message: string
  severity: 'high' | 'medium' | 'low'
  suggestion?: string
}

interface CodeAnalysis {
  overallScore: number
  issues: CodeIssue[]
  suggestions: string[]
  metrics: {
    complexity: number
    maintainability: number
    performance: number
    security: number
  }
}

const supportedLanguages = [
  { value: 'javascript', label: 'JavaScript' },
  { value: 'typescript', label: 'TypeScript' },
  { value: 'python', label: 'Python' },
  { value: 'java', label: 'Java' },
  { value: 'cpp', label: 'C++' },
  { value: 'csharp', label: 'C#' },
  { value: 'php', label: 'PHP' },
  { value: 'ruby', label: 'Ruby' },
  { value: 'go', label: 'Go' },
  { value: 'rust', label: 'Rust' },
]

export default function AICodeReviewer() {
  const [code, setCode] = useState('')
  const [language, setLanguage] = useState('javascript')
  const [analysis, setAnalysis] = useState<CodeAnalysis | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [copied, setCopied] = useState(false)

  const analyzeCode = async () => {
    if (!code.trim()) return

    setIsAnalyzing(true)
    
    // Simulate AI analysis with realistic code review suggestions
    await new Promise(resolve => setTimeout(resolve, 2000))

    const mockAnalysis: CodeAnalysis = {
      overallScore: 85,
      issues: [
        {
          type: 'warning',
          line: 5,
          message: 'Variable "temp" is declared but never used',
          severity: 'medium',
          suggestion: 'Remove the unused variable or use it in your logic'
        },
        {
          type: 'error',
          line: 12,
          message: 'Potential null reference error',
          severity: 'high',
          suggestion: 'Add null check before accessing the property'
        },
        {
          type: 'suggestion',
          line: 8,
          message: 'Consider using array.map() for better readability',
          severity: 'low',
          suggestion: 'Replace the for loop with array.map() method'
        }
      ],
      suggestions: [
        'Extract reusable functions to improve code organization',
        'Add proper error handling for edge cases',
        'Consider using modern JavaScript features like async/await',
        'Add JSDoc comments for better documentation'
      ],
      metrics: {
        complexity: 6.5,
        maintainability: 8.2,
        performance: 7.8,
        security: 9.1
      }
    }

    setAnalysis(mockAnalysis)
    setIsAnalyzing(false)
  }

  const copyToClipboard = async () => {
    if (!analysis) return
    
    const text = `Code Analysis Report
Overall Score: ${analysis.overallScore}/100

Issues Found: ${analysis.issues.length}
- High Priority: ${analysis.issues.filter(i => i.severity === 'high').length}
- Medium Priority: ${analysis.issues.filter(i => i.severity === 'medium').length}
- Low Priority: ${analysis.issues.filter(i => i.severity === 'low').length}

Metrics:
- Complexity: ${analysis.metrics.complexity}/10
- Maintainability: ${analysis.metrics.maintainability}/10
- Performance: ${analysis.metrics.performance}/10
- Security: ${analysis.metrics.security}/10

Generated by AI Code Reviewer`
    
    await navigator.clipboard.writeText(text)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-100 text-red-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'low': return 'bg-blue-100 text-blue-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'high': return <AlertCircle className="w-4 h-4 text-red-500" />
      case 'medium': return <AlertTriangle className="w-4 h-4 text-yellow-500" />
      case 'low': return <Lightbulb className="w-4 h-4 text-blue-500" />
      default: return <CheckCircle className="w-4 h-4 text-gray-500" />
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <Badge variant="secondary" className="text-sm px-4 py-2 mb-4">
            <Brain className="w-4 h-4 mr-2" />
            AI-Powered Code Review
          </Badge>
          <h1 className="text-4xl font-bold mb-4">AI Code Reviewer</h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Get intelligent code analysis, bug detection, and optimization suggestions powered by AI. 
            Improve code quality, performance, and maintainability.
          </p>
        </div>

        {/* Input Section */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Code className="w-5 h-5" />
              Enter Your Code
            </CardTitle>
            <CardDescription>
              Paste your code below and select the programming language for analysis
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-4 items-end">
              <div className="flex-1">
                <label className="text-sm font-medium mb-2 block">Programming Language</label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {supportedLanguages.map((lang) => (
                      <SelectItem key={lang.value} value={lang.value}>
                        {lang.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <Button 
                onClick={analyzeCode} 
                disabled={!code.trim() || isAnalyzing}
                className="px-6"
              >
                {isAnalyzing ? (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    Analyze Code
                  </>
                )}
              </Button>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Your Code</label>
              <Textarea
                placeholder="Paste your code here..."
                value={code}
                onChange={(e) => setCode(e.target.value)}
                className="min-h-[300px] font-mono text-sm"
              />
            </div>
          </CardContent>
        </Card>

        {/* Results Section */}
        {analysis && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            {/* Score Overview */}
            <Card className="mb-6">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Analysis Results</CardTitle>
                    <CardDescription>AI-powered code quality assessment</CardDescription>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold text-primary">{analysis.overallScore}/100</div>
                    <div className="text-sm text-muted-foreground">Overall Score</div>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-semibold text-blue-600">{analysis.metrics.complexity}/10</div>
                    <div className="text-sm text-muted-foreground">Complexity</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-semibold text-green-600">{analysis.metrics.maintainability}/10</div>
                    <div className="text-sm text-muted-foreground">Maintainability</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-semibold text-purple-600">{analysis.metrics.performance}/10</div>
                    <div className="text-sm text-muted-foreground">Performance</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-semibold text-red-600">{analysis.metrics.security}/10</div>
                    <div className="text-sm text-muted-foreground">Security</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Detailed Analysis */}
            <Tabs defaultValue="issues" className="space-y-4">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="issues">Issues ({analysis.issues.length})</TabsTrigger>
                <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
                <TabsTrigger value="export">Export</TabsTrigger>
              </TabsList>

              <TabsContent value="issues">
                <Card>
                  <CardHeader>
                    <CardTitle>Code Issues</CardTitle>
                    <CardDescription>
                      Found {analysis.issues.length} issues that need attention
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {analysis.issues.map((issue, index) => (
                        <div key={index} className="border rounded-lg p-4">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center gap-2">
                              {getSeverityIcon(issue.severity)}
                              <Badge className={getSeverityColor(issue.severity)}>
                                {issue.severity} priority
                              </Badge>
                              <span className="text-sm text-muted-foreground">
                                Line {issue.line}
                              </span>
                            </div>
                          </div>
                          <h4 className="font-medium mb-1">{issue.message}</h4>
                          {issue.suggestion && (
                            <p className="text-sm text-muted-foreground">
                              💡 {issue.suggestion}
                            </p>
                          )}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="suggestions">
                <Card>
                  <CardHeader>
                    <CardTitle>Improvement Suggestions</CardTitle>
                    <CardDescription>
                      AI-powered recommendations for better code quality
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {analysis.suggestions.map((suggestion, index) => (
                        <div key={index} className="flex items-start gap-3 p-3 bg-muted/50 rounded-lg">
                          <Lightbulb className="w-5 h-5 text-yellow-500 mt-0.5 flex-shrink-0" />
                          <p className="text-sm">{suggestion}</p>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="export">
                <Card>
                  <CardHeader>
                    <CardTitle>Export Analysis</CardTitle>
                    <CardDescription>
                      Export your code analysis report for documentation
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Button 
                        onClick={copyToClipboard}
                        variant="outline"
                        className="h-auto p-4"
                      >
                        <div className="text-center">
                          <Copy className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">Copy to Clipboard</div>
                          <div className="text-xs text-muted-foreground">
                            Copy analysis text
                          </div>
                        </div>
                      </Button>
                      
                      <Button 
                        variant="outline"
                        className="h-auto p-4"
                        disabled
                      >
                        <div className="text-center">
                          <Download className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">Download PDF</div>
                          <div className="text-xs text-muted-foreground">
                            Coming soon
                          </div>
                        </div>
                      </Button>
                    </div>
                    
                    {copied && (
                      <div className="text-center text-sm text-green-600">
                        ✓ Analysis copied to clipboard!
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </motion.div>
        )}

        {/* Features Section */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>Why Use AI Code Reviewer?</CardTitle>
            <CardDescription>
              Powerful features to improve your code quality
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Brain className="w-6 h-6 text-primary" />
                </div>
                <h3 className="font-semibold">AI-Powered Analysis</h3>
                <p className="text-sm text-muted-foreground">
                  Advanced AI algorithms detect issues and suggest improvements
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Zap className="w-5 h-5 text-primary" />
                </div>
                <h3 className="font-semibold">Instant Results</h3>
                <p className="text-sm text-muted-foreground">
                  Get comprehensive analysis in seconds, not hours
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Shield className="w-5 h-5 text-primary" />
                </div>
                <h3 className="font-semibold">Security First</h3>
                <p className="text-sm text-muted-foreground">
                  All code processing happens locally in your browser
                </p>
              </div>
              
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto">
                  <Code className="w-5 h-5 text-primary" />
                </div>
                <h3 className="font-semibold">Multi-Language</h3>
                <p className="text-sm text-muted-foreground">
                  Support for 10+ popular programming languages
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}