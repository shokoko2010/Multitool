'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Loader2, Shield, AlertTriangle, CheckCircle, XCircle, ExternalLink, Virus, Database } from 'lucide-react'
import { toast } from 'sonner'

interface MalwareScanResult {
  url: string
  status: 'clean' | 'warning' | 'infected' | 'unknown'
  scanDate: string
  engines: {
    name: string
    detected: boolean
    result: string
  }[]
  threats: {
    name: string
    type: 'malware' | 'phishing' | 'malicious' | 'unwanted'
    description: string
    severity: 'low' | 'medium' | 'high' | 'critical'
  }[]
  recommendations: string[]
  lastUpdated: string
}

export default function GoogleMalwareChecker() {
  const [url, setUrl] = useState('')
  const [scanResult, setScanResult] = useState<MalwareScanResult | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [selectedTab, setSelectedTab] = useState('overview')

  const scanForMalware = async () => {
    if (!url.trim()) {
      toast.error('Please enter a website URL')
      return
    }

    setIsScanning(true)
    try {
      // Simulate malware scanning
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Mock scan results
      const mockResult: MalwareScanResult = {
        url: url,
        status: Math.random() > 0.7 ? 'infected' : Math.random() > 0.3 ? 'warning' : 'clean',
        scanDate: new Date().toISOString(),
        engines: [
          { name: 'Google Safe Browsing', detected: Math.random() > 0.8, result: Math.random() > 0.8 ? 'Threat detected' : 'No threats found' },
          { name: 'VirusTotal', detected: Math.random() > 0.7, result: Math.random() > 0.7 ? 'Malicious detected' : 'Clean' },
          { name: 'Webroot', detected: Math.random() > 0.75, result: Math.random() > 0.75 ? 'Security risk' : 'Safe' },
          { name: 'Sucuri SiteCheck', detected: Math.random() > 0.8, result: Math.random() > 0.8 ? 'Blacklisted' : 'Clean' }
        ],
        threats: [
          {
            name: 'Malicious Script',
            type: 'malware',
            description: 'Suspicious JavaScript code detected',
            severity: Math.random() > 0.5 ? 'high' : 'medium'
          },
          {
            name: 'Phishing Attempt',
            type: 'phishing',
            description: 'Potential phishing website detected',
            severity: 'critical'
          }
        ].filter(() => Math.random() > 0.6),
        recommendations: [
          'Update website security software',
          'Scan all files for malware',
          'Change admin passwords immediately',
          'Review website access logs',
          'Consider website cleanup service'
        ],
        lastUpdated: new Date().toISOString()
      }
      
      setScanResult(mockResult)
      toast.success('Malware scan completed!')
    } catch (error) {
      toast.error('Failed to scan for malware')
    } finally {
      setIsScanning(false)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'clean':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />
      case 'infected':
        return <XCircle className="h-4 w-4 text-red-500" />
      case 'unknown':
        return <Shield className="h-4 w-4 text-gray-500" />
      default:
        return <Shield className="h-4 w-4 text-gray-500" />
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'clean':
        return <Badge variant="secondary" className="bg-green-100 text-green-800">Clean</Badge>
      case 'warning':
        return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">Warning</Badge>
      case 'infected':
        return <Badge variant="destructive">Infected</Badge>
      case 'unknown':
        return <Badge variant="outline">Unknown</Badge>
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'low':
        return <Badge variant="secondary" className="bg-blue-100 text-blue-800">Low</Badge>
      case 'medium':
        return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">Medium</Badge>
      case 'high':
        return <Badge variant="secondary" className="bg-orange-100 text-orange-800">High</Badge>
      case 'critical':
        return <Badge variant="destructive">Critical</Badge>
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  const openInSafeBrowsing = () => {
    if (scanResult) {
      window.open(`https://transparencyreport.google.com/safe-browsing/search?url=${encodeURIComponent(scanResult.url)}`, '_blank')
    }
  }

  const openInVirusTotal = () => {
    if (scanResult) {
      window.open(`https://www.virustotal.com/gui/url/${encodeURIComponent(scanResult.url)}`, '_blank')
    }
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Google Malware Checker</h1>
        <p className="text-muted-foreground">
          Scan websites for malware, viruses, and security threats using Google Safe Browsing and other security services
        </p>
      </div>

      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Website Security Scan</CardTitle>
            <CardDescription>Enter website URL to scan for malware and security threats</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2">
              <Input
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="flex-1"
              />
              <Button 
                onClick={scanForMalware}
                disabled={isScanning || !url.trim()}
              >
                {isScanning ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Shield className="h-4 w-4 mr-2" />
                    Scan for Malware
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {scanResult && (
          <>
            <Card>
              <CardHeader>
                <CardTitle>Scan Overview</CardTitle>
                <CardDescription>Overall security assessment</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {getStatusIcon(scanResult.status)}
                    <div>
                      <div className="flex items-center gap-2">
                        <span className="text-lg font-semibold">{scanResult.url}</span>
                        {getStatusBadge(scanResult.status)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Scanned on {new Date(scanResult.scanDate).toLocaleString()}
                      </div>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button onClick={openInSafeBrowsing} variant="outline" size="sm">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      Safe Browsing
                    </Button>
                    <Button onClick={openInVirusTotal} variant="outline" size="sm">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      VirusTotal
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Security Engine Results</CardTitle>
                <CardDescription>Results from multiple security scanning engines</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  {scanResult.engines.map((engine, index) => (
                    <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center gap-3">
                        <Virus className={`h-5 w-5 ${engine.detected ? 'text-red-500' : 'text-green-500'}`} />
                        <div>
                          <div className="font-medium">{engine.name}</div>
                          <div className={`text-sm ${engine.detected ? 'text-red-600' : 'text-green-600'}`}>
                            {engine.result}
                          </div>
                        </div>
                      </div>
                      {engine.detected && (
                        <XCircle className="h-5 w-5 text-red-500" />
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Detected Threats</CardTitle>
                <CardDescription>Security threats found during scanning</CardDescription>
              </CardHeader>
              <CardContent>
                {scanResult.threats.length > 0 ? (
                  <div className="space-y-4">
                    {scanResult.threats.map((threat, index) => (
                      <div key={index} className="flex items-start justify-between p-4 border rounded-lg">
                        <div className="flex items-start gap-3 flex-1">
                          <Virus className="h-5 w-5 text-red-500 mt-0.5" />
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-medium">{threat.name}</span>
                              {getSeverityBadge(threat.severity)}
                              <Badge variant="outline">{threat.type}</Badge>
                            </div>
                            <p className="text-sm text-muted-foreground">{threat.description}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
                    <p>No threats detected</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Security Recommendations</CardTitle>
                <CardDescription>Recommended actions to improve website security</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {scanResult.recommendations.map((recommendation, index) => (
                    <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                      <Database className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                      <span className="text-sm">{recommendation}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </>
        )}

        {!scanResult && !isScanning && (
          <Card>
            <CardContent className="flex flex-col items-center justify-center py-12">
                <Shield className="h-16 w-16 text-muted-foreground mb-4" />
                <p className="text-center text-muted-foreground">
                  Enter a website URL and click scan to check for malware and security threats
                </p>
              </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}